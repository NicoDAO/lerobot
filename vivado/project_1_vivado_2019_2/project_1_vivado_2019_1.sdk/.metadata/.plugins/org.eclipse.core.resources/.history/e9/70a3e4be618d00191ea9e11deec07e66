/*
 * Uart.cpp
 *
 *  Created on: 5 aoÃ»t 2018
 *      Author: nicolas
 */

#include "Uart.h"
#include "stdio.h"
#include "queue.h"
#include "semphr.h"
#include "xuartps.h"
#include "config_du_system.h"
/* The semaphore used to indicate the end of a transmission. */
static SemaphoreHandle_t xTxCompleteSemaphore = NULL;




/* The UART interrupts of interest when receiving. */
#define serRECEIVE_INTERRUPT_MASK	( XUARTPS_IXR_RXOVR | XUARTPS_IXR_RXFULL | XUARTPS_IXR_TOUT )

/* The UART interrupts of interest when transmitting. */
#define serTRANSMIT_IINTERRUPT_MASK ( XUARTPS_IXR_TXEMPTY )

LUart::LUart() {
	// TODO Auto-generated constructor stub

}

LUart::~LUart() {
	// TODO Auto-generated destructor stub
}
int LUart::setXUartPs(XUartPs * luae) {
#ifdef UART_PRESENT
	Uart_Ps = luae;
#endif
	return 1;
}
int LUart::configure() {

	//UBaseType_t uxQueueLength;
	//uxQueueLength = 100;

	/* Create the queue used to hold received characters.  NOTE THE COMMENTS AT
		THE TOP OF THIS FILE REGARDING THE USE OF QUEUES FOR THIS PURPSOE. */
#ifdef UART_PRESENT
	xRxQueue = xQueueCreate( uxQueueLength, sizeof( char ) );
		configASSERT( xRxQueue );


		/* Create the semaphore used to signal the end of a transmission, then take
		the semaphore so it is in the correct state the first time
		xSerialSendString() is called.  A block time of zero is used when taking
		the semaphore as it is guaranteed to be available (it was just created). */
		xTxCompleteSemaphore = xSemaphoreCreateBinary();
		configASSERT( xTxCompleteSemaphore );
		xSemaphoreTake( xTxCompleteSemaphore, 0 );





	/*
	 * Initialize the UART driver so that it's ready to use
	 * Look up the configuration in the config table and then initialize it.
	 */
	Config = XUartPs_LookupConfig(XPAR_PS7_UART_1_DEVICE_ID);
	if (NULL == Config) {
		return XST_FAILURE;
	}

	Status = XUartPs_CfgInitialize(this->Uart_Ps, Config, Config->BaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Check hardware build */
	Status = XUartPs_SelfTest(this->Uart_Ps);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	XUartPs_SetBaudRate(this->Uart_Ps, 115200);
	/*
	 * Connect the UART to the interrupt subsystem such that interrupts
	 * can occur. This function is application specific.
	 */
	Status = SetupInterruptSystem(&InterruptController, this->Uart_Ps,
	UART_INT_IRQ_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
	/*
	 * Enable the interrupt of the UART so interrupts will occur, setup
	 * a local loopback so data that is sent will be received.
	 */
	XUartPs_SetHandler(this->Uart_Ps, (XUartPs_Handler) LUart::Handler,
			this->Uart_Ps);

	u32 IntrMask;

	IntrMask =
	XUARTPS_IXR_TOUT | XUARTPS_IXR_PARITY |
	XUARTPS_IXR_OVER | XUARTPS_IXR_TXEMPTY | XUARTPS_IXR_RXFULL |
	XUARTPS_IXR_RXOVR;

	if (this->Uart_Ps->Platform == XPLAT_ZYNQ_ULTRA_MP) {
		IntrMask |= XUARTPS_IXR_RBRK;
	}

	XUartPs_SetInterruptMask(this->Uart_Ps, IntrMask);

	XUartPs_SetOperMode(this->Uart_Ps, XUARTPS_OPER_MODE_NORMAL);
	XUartPs_SetRecvTimeout(this->Uart_Ps, 8);

	/*
	 * Initialize the send buffer bytes with a pattern and the
	 * the receive buffer bytes to zero to allow the receive data to be
	 * verified
	 */
	int Index;
	for (Index = 0; Index < TEST_BUFFER_SIZE; Index++) {

		SendBuffer[Index] = (Index % 26) + 'A';

		RecvBuffer[Index] = 0;
	}

	/*
	 * Start receiving data before sending it since there is a loopback,
	 * ignoring the number of bytes received as the return value since we
	 * know it will be zero
	 */
	XUartPs_Recv(this->Uart_Ps, RecvBuffer, TEST_BUFFER_SIZE);

	/*
	 * Send the buffer using the UART and ignore the number of bytes sent
	 * as the return value since we are using it in interrupt mode.
	 */
	XUartPs_Send(this->Uart_Ps, SendBuffer, TEST_BUFFER_SIZE);

	/*
	 * Wait for the entire buffer to be received, letting the interrupt
	 * processing work in the background, this function may get locked
	 * up in this loop if the interrupts are not working correctly.
	 */

	/* Set the UART in Normal Mode */
	XUartPs_SetOperMode(this->Uart_Ps, XUARTPS_OPER_MODE_NORMAL);
#endif
	return XST_SUCCESS;

}

int LUart::recoit(u8 * truc_a_recevoir, int longueur_du_truc_a_recevoir) {
	//(this->Uart_Ps, truc_a_recevoir, longueur_du_truc_a_recevoir);
	return 1;
}
int LUart::envoie(u8 * truc_a_envoyer, int longueur_du_truc_a_envoyer) {
#if 0
	printf("\r  LUart::envoie -> : %s",truc_a_envoyer);
#else
	SentCount = 0;
#ifdef UART_PRESENT
	while (SentCount < (longueur_du_truc_a_envoyer - 1)) {
		/* Transmit the data */

		SentCount += XUartPs_Send(this->Uart_Ps, &truc_a_envoyer[SentCount], 1);

	}
#endif
	return SentCount;
#endif

	return 0;
}
int LUart::setBaudrate(int b) {
	this->bdr = b;
}

/**************************************************************************/
/**
 *
 * This function is the handler which performs processing to handle data events
 * from the device.  It is called from an interrupt context. so the amount of
 * processing should be minimal.
 *
 * This handler provides an example of how to handle data for the device and
 * is application specific.
 *
 * @param	CallBackRef contains a callback reference from the driver,
 *		in this case it is the instance pointer for the XUartPs driver.
 * @param	Event contains the specific kind of event that has occurred.
 * @param	EventData contains the number of bytes sent or received for sent
 *		and receive events.
 *
 * @return	None.
 *
 * @note		None.
 *
 ***************************************************************************/
void LUart::Handler(void *pvNotUsed) {
	{
	extern unsigned int XUartPs_SendBuffer( XUartPs *InstancePtr );
	uint32_t ulActiveInterrupts, ulChannelStatusRegister;
	//BaseType_t xHigherPriorityTaskWoken = pdFALSE;
	char cChar;
#ifdef UART_PRESENT
		//configASSERT( pvNotUsed == this->Uart_Ps);

		/* Remove compile warnings if configASSERT() is not defined. */
		//( void ) pvNotUsed;

		/* Read the interrupt ID register to see which interrupt is active. */
		ulActiveInterrupts = XUartPs_ReadReg(XPAR_PS7_UART_1_BASEADDR,  XUARTPS_IMR_OFFSET);
		ulActiveInterrupts &= XUartPs_ReadReg(XPAR_PS7_UART_1_BASEADDR,  XUARTPS_ISR_OFFSET);

		/* Are any receive events of interest active? */
		if( ( ulActiveInterrupts & serRECEIVE_INTERRUPT_MASK ) != 0 )
		{
			/* Read the Channel Status Register to determine if there is any data in
			the RX FIFO. */
			ulChannelStatusRegister = XUartPs_ReadReg( XPAR_PS7_UART_1_BASEADDR, XUARTPS_SR_OFFSET );

			/* Move data from the Rx FIFO to the Rx queue.  NOTE THE COMMENTS AT THE
			TOP OF THIS FILE ABOUT USING QUEUES FOR THIS PURPSOE. */
			while( ( ulChannelStatusRegister & XUARTPS_SR_RXEMPTY ) == 0 )
			{
				cChar =	XUartPs_ReadReg( XPAR_PS7_UART_1_BASEADDR, XUARTPS_FIFO_OFFSET );

				/* If writing to the queue unblocks a task, and the unblocked task
				has a priority above the currently running task (the task that this
				interrupt interrupted), then xHigherPriorityTaskWoken will be set
				to pdTRUE inside the xQueueSendFromISR() function.
				xHigherPriorityTaskWoken is then passed to portYIELD_FROM_ISR() at
				the end of this interrupt handler to request a context switch so the
				interrupt returns directly to the (higher priority) unblocked
				task. */
				xQueueSendFromISR( xRxQueue, &cChar, &xHigherPriorityTaskWoken );
				ulChannelStatusRegister = XUartPs_ReadReg( XPAR_PS7_UART_1_BASEADDR, XUARTPS_SR_OFFSET );
			}
		}

		/* Are any transmit events of interest active? */
		if( ( ulActiveInterrupts & serTRANSMIT_IINTERRUPT_MASK ) != 0 )
		{
			if( this->Uart_Ps->SendBuffer.RemainingBytes == 0 )
			{
				/* Give back the semaphore to indicate that the tranmission is
				complete.  If giving the semaphore unblocks a task, and the
				unblocked task has a priority above the currently running task (the
				task that this interrupt interrupted), then xHigherPriorityTaskWoken
				will be set	to pdTRUE inside the xSemaphoreGiveFromISR() function.
				xHigherPriorityTaskWoken is then passed to portYIELD_FROM_ISR() at
				the end of this interrupt handler to request a context switch so the
				interrupt returns directly to the (higher priority) unblocked
				task. */
				xSemaphoreGiveFromISR( xTxCompleteSemaphore, &xHigherPriorityTaskWoken );

				/* No more data to transmit. */
				XUartPs_WriteReg( XPAR_PS7_UART_1_BASEADDR, XUARTPS_IDR_OFFSET, XUARTPS_IXR_TXEMPTY );
			}
			else
			{
				/* More data to send. */
				XUartPs_SendBuffer( LUart::Uart_Ps);
			}
		}

		/* portYIELD_FROM_ISR() will request a context switch if executing this
		interrupt handler caused a task to leave the blocked state, and the task
		that left the blocked state has a higher priority than the currently running
		task (the task this interrupt interrupted).  See the comment above the calls
		to xSemaphoreGiveFromISR() and xQueueSendFromISR() within this function. */
		portYIELD_FROM_ISR( xHigherPriorityTaskWoken );

		/* Clear the interrupt status. */
		XUartPs_WriteReg( XPAR_PS7_UART_1_BASEADDR, XUARTPS_ISR_OFFSET, ulActiveInterrupts );
#endif
	}

}

/*****************************************************************************/
/**
 *
 * This function sets up the interrupt system so interrupts can occur for the
 * Uart. This function is application-specific. The user should modify this
 * function to fit the application.
 *
 * @param	IntcInstancePtr is a pointer to the instance of the INTC.
 * @param	UartInstancePtr contains a pointer to the instance of the UART
 *		driver which is going to xbe connected to the interrupt
 *		controller.
 * @param	UartIntrId is the interrupt Id and is typically
 *		XPAR_<UARTPS_instance>_INTR value from xparameters.h.
 *
 * @return	XST_SUCCESS if successful, otherwise XST_FAILURE.
 *
 * @note		None.
 *
 ****************************************************************************/
int LUart::SetupInterruptSystem(INTC *IntcInstancePtr, XUartPs *UartInstancePtr,
		u16 UartIntrId) {
	int Status;

#ifdef XPAR_INTC_0_DEVICE_ID
#ifndef TESTAPP_GEN
	/*
	 * Initialize the interrupt controller driver so that it's ready to
	 * use.
	 */
	Status = XIntc_Initialize(IntcInstancePtr, INTC_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
#endif
	/*
	 * Connect the handler that will be called when an interrupt
	 * for the device occurs, the handler defined above performs the
	 * specific interrupt processing for the device.
	 */
	Status = XIntc_Connect(IntcInstancePtr, UartIntrId,
			(XInterruptHandler) XUartPs_InterruptHandler, UartInstancePtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

#ifndef TESTAPP_GEN
	/*
	 * Start the interrupt controller so interrupts are enabled for all
	 * devices that cause interrupts.
	 */
	Status = XIntc_Start(IntcInstancePtr, XIN_REAL_MODE);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
#endif
	/*
	 * Enable the interrupt for uart
	 */
	XIntc_Enable(IntcInstancePtr, UartIntrId);

#ifndef TESTAPP_GEN
	/*
	 * Initialize the exception table.
	 */
	Xil_ExceptionInit();

	/*
	 * Register the interrupt controller handler with the exception table.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler) XIntc_InterruptHandler,
			IntcInstancePtr);
#endif
#else
#ifndef TESTAPP_GEN
	XScuGic_Config *IntcConfig; /* Config for interrupt controller */

	/* Initialize the interrupt controller driver */
	IntcConfig = XScuGic_LookupConfig(INTC_DEVICE_ID);
	if (NULL == IntcConfig) {
		return XST_FAILURE;
	}

	Status = XScuGic_CfgInitialize(IntcInstancePtr, IntcConfig,
			IntcConfig->CpuBaseAddress);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/*
	 * Connect the interrupt controller interrupt handler to the
	 * hardware interrupt handling logic in the processor.
	 */
	Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,
			(Xil_ExceptionHandler) XScuGic_InterruptHandler, IntcInstancePtr);
#endif

	/*
	 * Connect a device driver handler that will be called when an
	 * interrupt for the device occurs, the device driver handler
	 * performs the specific interrupt processing for the device
	 */
	Status = XScuGic_Connect(IntcInstancePtr, UartIntrId,
			(Xil_ExceptionHandler) XUartPs_InterruptHandler,
			(void *) UartInstancePtr);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	/* Ensure interrupts start clear. */
	XUartPs_WriteReg( XPAR_PS7_UART_1_BASEADDR, XUARTPS_ISR_OFFSET, XUARTPS_IXR_MASK );

	/* Enable the interrupt for the device */
	XScuGic_Enable(IntcInstancePtr, UartIntrId);



#endif
#ifndef TESTAPP_GEN
	/* Enable interrupts */
	Xil_ExceptionEnable();
#endif

	return XST_SUCCESS;

	extern void FreeRTOS_Tick_Handler( void );


}

